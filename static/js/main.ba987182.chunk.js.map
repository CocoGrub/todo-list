{"version":3,"sources":["App.js","index.js"],"names":["App","items","filter","initialState","allTodos","id","Date","now","toLocaleString","text","complete","uncompleted","completed","search","useReducer","state","action","type","payload","x","map","z","dispatch","useState","addTodoInput","changeAddTodoInput","searchInput","changeSearchInput","allTODO","length","completedTODO","TodoCount","uncompletedTODO","changeVisibleState","visibleItems","item","toLowerCase","indexOf","searchItems","className","onSubmit","todo","preventDefault","Input","placeholder","value","onChange","target","Button","style","border","height","input","Chip","size","label","ButtonGroup","variant","color","aria-label","onClick","List","data","delElement","TodoList","v","k","ListItem","justifyContent","fontSize","key","checked","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba987182.chunk.js","sourcesContent":["import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\nfunction App() {\r\n\r\n    const initialState = {\r\n        allTodos: [{id: Date.now().toLocaleString(), text: 'drink coffee', complete: true}],\r\n        uncompleted: [],\r\n        completed: [],\r\n        filter: 'all',\r\n        search: ''\r\n\r\n    }\r\n\r\n    function reducer(state, action) {\r\n        switch (action.type) {\r\n            case \"add\":\r\n                return {...state, allTodos: [...state.allTodos, action.payload]}\r\n            case \"del\":\r\n                return {...state, allTodos: [...state.allTodos.filter((x) => x.id !== action.payload)]}\r\n            case \"complete\":\r\n                return {\r\n                    ...state, allTodos: [...state.allTodos.map((x) => {\r\n                        if (x.id === action.payload) {\r\n                            const z = {...x}\r\n                            z.complete = !x.complete;\r\n                            return z\r\n                        }\r\n                        return x\r\n                    })]\r\n                }\r\n            case 'all':\r\n                return {...state, filter: state.filter = 'all'}\r\n            case 'done':\r\n                return {...state, filter: state.filter = 'done'}\r\n            case 'active':\r\n                return {...state, filter: state.filter = 'active'}\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    const [addTodoInput, changeAddTodoInput] = useState(\"\")\r\n    const [searchInput, changeSearchInput] = useState(\"\")\r\n    const handleChange = (x) => {\r\n        changeAddTodoInput(x.target.value)\r\n    }\r\n    const handleSubmit = (x) => {\r\n        const todo = {\r\n            id: Date.now().toLocaleString(),\r\n            text: addTodoInput,\r\n            complete: false\r\n        }\r\n        dispatch({type: \"add\", payload: todo})\r\n        x.preventDefault();\r\n        changeAddTodoInput(\"\")\r\n    }\r\n    const delElement = (x) => {\r\n        dispatch({\r\n            type: 'del', payload: x\r\n        })\r\n    }\r\n\r\n    const filterHandleChange = (input) => {\r\n        changeSearchInput(input.target.value)\r\n    }\r\n\r\n    const complete = (x) => {\r\n        dispatch({\r\n            type: 'complete',\r\n            payload: x\r\n        })\r\n    }\r\n\r\n    const TodoCount = () => {\r\n\r\n        const allTODO = state.allTodos.length\r\n        const completedTODO = state.allTodos.filter((x) => x.complete).length\r\n        const uncompletedTODO = allTODO - completedTODO\r\n\r\n        return [allTODO,completedTODO,uncompletedTODO]\r\n    }\r\n\r\n    const [allTODO,completedTODO,uncompletedTODO]=TodoCount()\r\n\r\n    const filterItems = (items, filter) => {\r\n        if (filter === 'all') {\r\n            return items;\r\n        } else if (filter === 'active') {\r\n            return items.filter((item) => (!item.complete));\r\n        } else if (filter === 'done') {\r\n            return items.filter((item) => item.complete);\r\n        }\r\n    }\r\n\r\n    const searchItems = (items, search) => {\r\n        if (search.length === 0) {\r\n            return items;\r\n        }\r\n\r\n        return items.filter((item) => {\r\n            return item.text.toLowerCase().indexOf(search.toLowerCase()) > -1;\r\n        });\r\n    }\r\n\r\n    const changeVisibleState = (x) => {\r\n        if (x === 'all') {\r\n            dispatch({type: 'all'})\r\n        } else if (x === 'active') {\r\n            dispatch({type: 'active'})\r\n        } else if ('done') {\r\n            dispatch({type: 'done'})\r\n        }\r\n    }\r\n    const visibleItems = searchItems(filterItems(state.allTodos, state.filter), searchInput);\r\n    return (\r\n        <div className=\"App\">\r\n            <span>What need to do?</span>\r\n            <form onSubmit={handleSubmit}>\r\n                <Input type={\"text\"} placeholder={\"typo something\"} value={addTodoInput} onChange={handleChange}/>\r\n                <Button style={{border:'1px solid green',height:\"1.9rem\"}} type={\"submit\"}>add</Button>\r\n            </form>\r\n            <Input type={\"text\"} placeholder={\"search\"} value={searchInput} onChange={filterHandleChange}/>\r\n            <br/>\r\n            <Chip size=\"small\" label={`all todos:${allTODO}`}></Chip><Chip size=\"small\" label={`completed:${completedTODO}`}></Chip> <Chip size=\"small\" label={`uncompleted:${uncompletedTODO}`}></Chip>\r\n            <hr/>\r\n            <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\r\n            <Button onClick={() => {\r\n                changeVisibleState('all')\r\n            }}>show all\r\n            </Button>\r\n\r\n            <Button onClick={() => {\r\n                changeVisibleState('done')\r\n            }}>completed\r\n            </Button>\r\n            <Button onClick={() => {\r\n                changeVisibleState('active')\r\n            }}>uncompleted\r\n            </Button>\r\n            </ButtonGroup>\r\n            <List  >\r\n                <TodoList data={visibleItems} delElement={delElement} complete={complete}/>\r\n                </List>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nconst TodoList = ({data, delElement, complete}) => {\r\n    return <>  {data.map((v, k) => {\r\n        return <ListItem   style={{justifyContent: \"center\", fontSize:'1.5rem'}} key={v.id}>\r\n            {/*<Button variant=\"contained\" color=\"primary\"></Button>*/}\r\n            <input type={\"checkbox\"} checked={v.complete} onChange={() => {\r\n                complete(v.id)\r\n            }}>\r\n            </input>\r\n            &nbsp;{v.text}&nbsp;\r\n            <Button style={{height:\"1.2rem\"}}  variant=\"contained\" color=\"primary\" onClick={() => {\r\n                delElement(v.id)\r\n            }}>del</Button>\r\n<br/>\r\n        </ListItem >\r\n    })}\r\n    </>\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}